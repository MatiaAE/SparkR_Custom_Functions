partialDependencePlot <- function(df, model, var, continuous_vars){
  
  continuous_columns = continuous_vars
  #get all columns
  myColList = df %>% colnames()
  #get categorical columns
  categorical_list = myColList[!(myColList %in% continuous_columns)]
  
  #get categoricla baselines
  categorical_baselines = list()
  for(i in categorical_list){
    categorical_baselines[[i]] = get_CategoricalMode(random_sample_selected, i)
  }
  names(categorical_baselines) = c()
  categorical_baselines = data.frame(t(unlist(categorical_baselines)))
  
  
  #get continuous baselines
  continuous_baselines = random_sample_selected %>%
  select(continuous_columns) %>%
  summarise_all(mean) %>% collect()
  
  #baseline row
  baseline_row = cbind(continuous_baselines, categorical_baselines) %>%
    select(-!!as.name(var))
  
  if(var %in% continuous_columns){
    min_var = df %>% 
      select(!!as.name(var)) %>% 
      summarise_all(min) %>% 
      collect() %>%
      unlist()
    
    max_var = df %>% 
      select(!!as.name(var)) %>% 
      summarise_all(max) %>% 
      collect() %>% 
      unlist()
    
    var_range = seq(from = min_var, to = max_var, length.out=100)
    flexed_column = data.frame("test" = var_range)
    
    baseline_grid = baseline_row[rep(1,100),]
    #baseline_grid = cbind(baseline_grid, !!var = var_range)
    baseline_grid = baseline_grid %>%
      mutate(!!as.name(var) := var_range)
    #return(baseline_grid)
    
  }
  else{
    #add categorical logic
    
  }
  
  # add prediction logic
  #copy to spark data frame for prediction
  #return(baseline_grid)
  baseline_grid_prepped = prep_Data(baseline_grid)
  baseline_grid_spark = sparklyr::copy_to(sc, baseline_grid_prepped, overwrite=TRUE)
  prediction_grid = ml_predict(model, baseline_grid_spark)
  # do this if variable is missing
  prediction_grid = prediction_grid %>% 
    collect() %>%
    mutate(!!as.name(var) := var_range)
  
  return(prediction_grid)
  
}

